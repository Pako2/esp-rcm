void ICACHE_FLASH_ATTR setupWebServer()
{
	server.addHandler(&ws);
	ws.onEvent(onWsEvent);
// 	AsyncCallbackJsonWebHandler *handler = new AsyncCallbackJsonWebHandler("/commit", [](AsyncWebServerRequest *request, JsonVariant &json) {
// 		bool failed = true;
// 		JsonObject &root = json.as<JsonObject>();
// 		if (!root.success())
// 		{
// #ifdef DEBUG
// 			Serial.println(F("[ WARN ] Couldn't parse JSON message"));
// #endif
// 		}
// 		else
// 		{
// 			//AsyncWebServerResponse * response = request->beginResponse(200, "text/plain", "Success");
// 			//response->addHeader("Connection", "close");
// 			//request->send(response);

// 			// Web Browser sends some commands, check which command is given
// 			if (root.containsKey("command"))
// 			{
// 				const char *command = root["command"];
// 				// Check whatever the command is and act accordingly
// 				if (strcmp(command, "configfile") == 0)
// 				{
// 					File f = SPIFFS.open("/config.json", "w+");
// 					if (f)
// 					{
// 						size_t len = root.measurePrettyLength();
// 						root.prettyPrintTo(f);
// 						f.close();
// 						shouldReboot = true;
// 						//ESP.restart();
// 						writeEvent("INFO", "sys", "Config stored in the SPIFFS", String(len)+" bytes");
// #ifdef DEBUG
// 						Serial.print(F("[ INFO ] Config stored in the SPIFFS ("));
// 						Serial.print(len);
// 						Serial.println(F(" bytes)"));
// #endif
// 						failed = false;
// 						request->send(202, "text/plain", "Config Success");
// 					}
// 				}


// 			}
// 		}
// 		if (failed) {request->send(405, "text/plain", "Config Failed");}
// 	});
// 	server.addHandler(handler);

	server.onNotFound([](AsyncWebServerRequest *request) {
		AsyncWebServerResponse *response = request->beginResponse(404, "text/plain", "Not found");
		request->send(response);
	});
	server.on("/update", HTTP_POST, [](AsyncWebServerRequest *request) {
		AsyncWebServerResponse * response = request->beginResponse(200, "text/plain", shouldReboot ? "OK" : "FAIL");
		response->addHeader("Connection", "close");
		request->send(response); }, [](AsyncWebServerRequest *request, String filename, size_t index, uint8_t *data, size_t len, bool final) {
		if (!request->authenticate(http_username, http_pass)) {
			return;
		}
		if (!index) {
			updateflag = true;
			writeEvent("INFO", "updt", "Firmware update started", filename.c_str());
#ifdef DEBUG
			Serial.printf("[ UPDT ] Firmware update started: %s\r\n", filename.c_str());
#endif
			Update.runAsync(true);
			if (!Update.begin((ESP.getFreeSketchSpace() - 0x1000) & 0xFFFFF000)) {
				writeEvent("ERRO", "updt", "Not enough space to update","");
#ifdef DEBUG
				Update.printError(Serial);
#endif
			}
		}
		if (!Update.hasError()) {
			if (Update.write(data, len) != len) {
				writeEvent("ERRO", "updt", "Writing to flash is failed", filename.c_str());
#ifdef DEBUG
				Update.printError(Serial);
#endif
			}
		}
		if (final) {
			if (Update.end(true)) {
				writeEvent("INFO", "updt", "Firmware update is finished", "");
#ifdef DEBUG
				Serial.printf("[ UPDT ] Firmware update finished: %uB\r\n", index + len);
#endif
				shouldReboot = !Update.hasError();
			} else {
				writeEvent("ERRO", "updt", "Update is failed", "");
#ifdef DEBUG
				Update.printError(Serial);
#endif
			}
		} });
	server.on("/fonts/glyphicons-halflings-regular.woff", HTTP_GET, [](AsyncWebServerRequest *request) {
		AsyncWebServerResponse *response = request->beginResponse_P(200, "font/woff", glyphicons_halflings_regular_woff_gz, glyphicons_halflings_regular_woff_gz_len);
		response->addHeader("Content-Encoding", "gzip");
		request->send(response);
	});
	server.on("/fonts/glyphicons-halflings-regular.woff2", HTTP_GET, [](AsyncWebServerRequest *request) {
		AsyncWebServerResponse *response = request->beginResponse_P(200, "font/woff2", glyphicons_halflings_regular_woff2_gz, glyphicons_halflings_regular_woff2_gz_len);
		response->addHeader("Content-Encoding", "gzip");
		request->send(response);
	});
	server.on("/css/required.css", HTTP_GET, [](AsyncWebServerRequest *request) {
		AsyncWebServerResponse *response = request->beginResponse_P(200, "text/css", required_css_gz, required_css_gz_len);
		response->addHeader("Content-Encoding", "gzip");
		request->send(response);
	});
	server.on("/css/esprcm.css", HTTP_GET, [](AsyncWebServerRequest *request) {
		AsyncWebServerResponse *response = request->beginResponse_P(200, "text/css", esprcm_css_gz, esprcm_css_gz_len);
		response->addHeader("Content-Encoding", "gzip");
		request->send(response);
	});
	server.on("/js/required.js", HTTP_GET, [](AsyncWebServerRequest *request) {
		AsyncWebServerResponse *response = request->beginResponse_P(200, "text/javascript", required_js_gz, required_js_gz_len);
		response->addHeader("Content-Encoding", "gzip");
		request->send(response);
	});
	server.on("/js/esprcm.js", HTTP_GET, [](AsyncWebServerRequest *request) {
		AsyncWebServerResponse *response = request->beginResponse_P(200, "text/javascript", esprcm_js_gz, esprcm_js_gz_len);
		response->addHeader("Content-Encoding", "gzip");
		request->send(response);
	});

	server.on("/index.html", HTTP_GET, [](AsyncWebServerRequest *request) {
		AsyncWebServerResponse *response = request->beginResponse_P(200, "text/html", index_html_gz, index_html_gz_len);
		response->addHeader("Content-Encoding", "gzip");
		request->send(response);
	});

	server.on("/esprcm.htm", HTTP_GET, [](AsyncWebServerRequest *request) {
		AsyncWebServerResponse *response = request->beginResponse_P(200, "text/html", esprcm_htm_gz, esprcm_htm_gz_len);
		response->addHeader("Content-Encoding", "gzip");
		request->send(response);
	});

	if (http_pass == NULL)
	{
		http_pass = strdup("admin");
	}
	server.on("/login", HTTP_GET, [](AsyncWebServerRequest *request) {
		String remoteIP = printIP(request->client()->remoteIP());
		if (!request->authenticate(http_username, http_pass))
		{
			writeEvent("WARN", "websrv", "New login attempt", remoteIP);
			return request->requestAuthentication();
		}
		request->send(200, "text/plain", "Success");
		writeEvent("INFO", "websrv", "Login success!", remoteIP);
	});
	server.rewrite("/", "/index.html");
	server.begin();
}