void connectToMqtt()
{
#ifdef DEBUG
	Serial.println(F("[ INFO ] Try to connect mqtt "));
#endif
	mqttClient.connect();
}

void onMqttDisconnect(AsyncMqttClientDisconnectReason reason)
{
	String reasonstr = "";
	switch (reason)
	{
	case (AsyncMqttClientDisconnectReason::TCP_DISCONNECTED):
		reasonstr = "TCP_DISCONNECTED";
		break;
	case (AsyncMqttClientDisconnectReason::MQTT_UNACCEPTABLE_PROTOCOL_VERSION):
		reasonstr = "MQTT_UNACCEPTABLE_PROTOCOL_VERSION";
		break;
	case (AsyncMqttClientDisconnectReason::MQTT_IDENTIFIER_REJECTED):
		reasonstr = "MQTT_IDENTIFIER_REJECTED";
		break;
	case (AsyncMqttClientDisconnectReason::MQTT_SERVER_UNAVAILABLE):
		reasonstr = "MQTT_SERVER_UNAVAILABLE";
		break;
	case (AsyncMqttClientDisconnectReason::MQTT_MALFORMED_CREDENTIALS):
		reasonstr = "MQTT_MALFORMED_CREDENTIALS";
		break;
	case (AsyncMqttClientDisconnectReason::MQTT_NOT_AUTHORIZED):
		reasonstr = "MQTT_NOT_AUTHORIZED";
		break;
	case (AsyncMqttClientDisconnectReason::ESP8266_NOT_ENOUGH_SPACE):
		reasonstr = "ESP8266_NOT_ENOUGH_SPACE";
		break;
	default:
		reasonstr = "Unknown";
		break;
	}
	writeEvent("WARN", "mqtt", "Disconnected from MQTT server", reasonstr);

	if (WiFi.isConnected())
	{
		//mqttClient.setServer(mhs, mport);
		mqttReconnectTimer.once(60, connectToMqtt);
	}
}

void mqtt_publish_connect(time_t now_time, String const &wifi, String const &ip)
{
	const char *topic = mqttTopic;
	DynamicJsonBuffer jsonBuffer;
	JsonObject &root = jsonBuffer.createObject();
	root["type"] = "connect";
	root["time"] = getLocalTimeString(now_time);
	root["Wifi SSID"] = wifi;
	root["Local IP"] = ip;
	root["roomname"] = roomname;
	String mqttBuffer_boot;
	root.printTo(mqttBuffer_boot);
	mqttClient.publish(topic, 0, false, mqttBuffer_boot.c_str());
#ifdef DEBUG
	Serial.print(F("[ INFO ] Mqtt Publish:"));
	Serial.println(mqttBuffer_boot);
#endif
}

void mqtt_publish_heartbeat(time_t heartbeat)
{
	const char *topic = mqttTopic;
	DynamicJsonBuffer jsonBuffer;
	JsonObject &root = jsonBuffer.createObject();
	root["type"] = "heartbeat";
	root["time"] = getLocalTimeString(heartbeat);
	root["temperature"] = my_round(temperature.value);
	root["humidity"] = my_round(humidity.value);
	root["roomname"] = roomname;
	String mqttBuffer;
	root.printTo(mqttBuffer);
	mqttClient.publish(topic, 0, false, mqttBuffer.c_str());
#ifdef DEBUG
	Serial.print(F("[ INFO ] Mqtt Publish:"));
	Serial.println(mqttBuffer);
#endif
}

void onMqttPublish(uint16_t packetId)
{
	writeEvent("INFO", "mqtt", "MQTT publish acknowledged", String(packetId));
}

void onMqttConnect(bool sessionPresent)
{
#ifdef DEBUG
	Serial.println(F("[ INFO ] MQTT Connected session"));
#endif
	if (sessionPresent == true)
	{
#ifdef DEBUG
		Serial.println(F("[ INFO ]MQTT session Present: True"));
#endif
		writeEvent("INFO", "mqtt", "Connected to MQTT Server", "Session Present");
	}
	mqtt_publish_connect(now(), WiFi.SSID(), WiFi.localIP().toString());
}

void mqtt_publish_climate()
{
	if (mqttenabled == 1)
	{
		time_t tmstmp = now();
		char buf[256];
		if (mqttClient.connected())
		{
			const char *topic = mqttTopic;
			DynamicJsonBuffer jsonBuffer;
			JsonObject &root = jsonBuffer.createObject();
			if (mqttkind == 1)
			{
				root["type"] = "test message";
			}
			else if (mqttkind > 1)
			{
				tmstmp = alarmtime;
				root["type"] = "alarm";
				root["kind"] = getKind(mqttkind);
			}
			root["temperature"] = my_round(temperature.value);
			root["temperature"] = my_round(temperature.value);
			root["roomname"] = roomname;
			root["time"] = getLocalTimeString(tmstmp);
			size_t size = 1 + root.measureLength();
			char buffer[size];
			root.printTo(buffer, size);
			mqttClient.publish(topic, 0, false, buffer);
#ifdef DEBUG
			Serial.print(F("[ INFO ] Mqtt Publish:"));
			Serial.println(buffer);
#endif
			sprintf(buf, "Mqtt message %s \nhas been sent successfully", buffer);
		}
		else
			sprintf(buf, "Mqtt client not connected");
		if (mqttkind == 1)
			sendConfirmation(String(buf)); //only if kind == test
		mqttkind = 0;
	}
}

void mqtt_beat()
{
	if (mqttenabled == 1)
	{
		if (mqttClient.connected())
		{
			mqtt_publish_heartbeat(now_);
		}
		else
		{
#ifdef DEBUG
			Serial.println(F("[ INFO ] Mqtt heartbeat - client not connected"));
#endif
		}
	}
}
