void ICACHE_FLASH_ATTR writeEvent(String type, String src, String desc, String data) {
	DynamicJsonBuffer jsonBuffer;
	JsonObject &root = jsonBuffer.createObject();
	root["type"] = type;
	root["src"] = src;
	root["desc"] = desc;
	root["data"] = data;
	root["time"] = now();
	File eventlog = SPIFFS.open("/eventlog.json", "a");
	root.printTo(eventlog);
	eventlog.print("\n");
	eventlog.close();
}

void ICACHE_FLASH_ATTR writeLatest(String uid, String username, int acctype) {
	DynamicJsonBuffer jsonBuffer;
	JsonObject &root = jsonBuffer.createObject();
	root["uid"] = uid;
	root["username"] = username;
	root["acctype"] = acctype;
	root["timestamp"] = now();
	File latestlog = SPIFFS.open("/latestlog.json", "a");
	root.printTo(latestlog);
	latestlog.print("\n");
	latestlog.close();
}

void ICACHE_FLASH_ATTR sendEventLog(int page) {
	DynamicJsonBuffer jsonBuffer;
	JsonObject &root = jsonBuffer.createObject();
	root["command"] = "eventlist";
	root["page"] = page;
	JsonArray &items = root.createNestedArray("list");
	File eventlog = SPIFFS.open("/eventlog.json", "r");
	int first = (page - 1) * 10;
	int last = page * 10;
	int i = 0;
	while (eventlog.available()) {
		String item = String();
		item = eventlog.readStringUntil('\n');
		if (i >= first && i < last) {
			items.add(item);
		}
		i++;
	}
	eventlog.close();
	float pages = i / 10.0;
	root["haspages"] = ceil(pages);
	size_t len = root.measureLength();
	AsyncWebSocketMessageBuffer *buffer = ws.makeBuffer(len);
	if (buffer) {
		root.printTo((char *)buffer->get(), len + 1);
		ws.textAll(buffer);
		ws.textAll("{\"command\":\"result\",\"resultof\":\"eventlist\",\"result\": true}");
	}
}

void ICACHE_FLASH_ATTR sendLatestLog(int page) {
	DynamicJsonBuffer jsonBuffer;
	JsonObject &root = jsonBuffer.createObject();
	root["command"] = "latestlist";
	root["page"] = page;
	JsonArray &items = root.createNestedArray("list");
	File latestlog = SPIFFS.open("/latestlog.json", "r");
	int first = (page - 1) * 10;
	int last = page * 10;
	int i = 0;
	while (latestlog.available()) {
		String item = String();
		item = latestlog.readStringUntil('\n');
		if (i >= first && i < last) {
			items.add(item);
		}
		i++;
	}
	latestlog.close();
	float pages = i / 10.0;
	root["haspages"] = ceil(pages);
	size_t len = root.measureLength();
	AsyncWebSocketMessageBuffer *buffer = ws.makeBuffer(len);
	if (buffer) {
		root.printTo((char *)buffer->get(), len + 1);
		ws.textAll(buffer);
		ws.textAll("{\"command\":\"result\",\"resultof\":\"latestlist\",\"result\": true}");
	}
}